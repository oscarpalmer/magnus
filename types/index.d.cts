// Generated by dts-bundle-generator v9.5.1

/**
Represents an object with `unknown` value. You probably want this instead of `{}`.

Use case: You have an object whose keys and values are unknown to you.

@example
```
import type {UnknownRecord} from 'type-fest';

function toJson(object: UnknownRecord) {
	return JSON.stringify(object);
}

toJson({hello: 'world'});
//=> '{"hello":"world"}'

function isObject(value: unknown): value is UnknownRecord {
	return typeof value === 'object' && value !== null;
}

isObject({hello: 'world'});
//=> true

isObject('hello');
//=> false
```

@category Type
@category Object
*/
export type UnknownRecord = Record<PropertyKey, unknown>;
export type PlainObject = UnknownRecord;
export type ActionParameters = {
	callback: (event: Event) => void;
	name: string;
	options: AddEventListenerOptions;
	type: string;
};
export type ControllerConstructor = new (context: Context) => Controller;
export type ObserverCallback = (element: Element, name: string, value: string, added: boolean) => void;
declare class Observer {
	private readonly element;
	private readonly options;
	private readonly handler;
	private frame;
	private readonly observer;
	private running;
	constructor(element: Element, options: MutationObserverInit, handler: ObserverCallback);
	start(): void;
	stop(): void;
	update(): void;
}
declare class Actions {
	private readonly store;
	add(name: string, target: EventTarget): void;
	clear(): void;
	create(parameters: ActionParameters): void;
	has(name: string): boolean;
	remove(name: string, target: EventTarget): void;
}
declare class Data {
	readonly value: PlainObject;
	constructor(context: Context);
}
declare class Targets {
	private readonly store;
	add(name: string, element: Element): void;
	clear(): void;
	get(name: string): Element[];
	remove(name: string, element: Element): void;
}
declare class Context {
	readonly name: string;
	readonly element: Element;
	readonly actions: Actions;
	readonly controller: InstanceType<ControllerConstructor>;
	readonly data: Data;
	readonly observer: Observer;
	readonly targets: Targets;
	constructor(name: string, element: Element, ctor: ControllerConstructor);
}
export declare abstract class Controller<Model extends PlainObject = PlainObject> {
	protected readonly context: Context;
	get element(): Element;
	get data(): Model;
	get name(): string;
	constructor(context: Context);
	abstract connected(): void;
	abstract disconnected(): void;
}
declare class Magnus {
	add(name: string, ctor: ControllerConstructor): void;
	remove(name: string): void;
	start(): void;
	stop(): void;
}
export declare const magnus: Magnus;

export {};
